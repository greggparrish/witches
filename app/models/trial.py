import re
from app import db
from app.models.accused import Accused


class Trial(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    accused_ref = db.Column(db.String(128))
    accused_id = db.Column(db.Integer, db.ForeignKey(Accused.id))
    admit_lesser_charge = db.Column(db.Boolean)
    age_at_case = db.Column(db.Integer)
    aggravating_disease = db.Column(db.Boolean)
    animal_death = db.Column(db.Boolean)
    animal_illness = db.Column(db.Boolean)
    case_common_name = db.Column(db.String(128))
    case_date = db.Column(db.String(128))
    case_id = db.Column(db.Integer)
    case_notes = db.Column(db.Text)
    case_ref = db.Column(db.String(128))
    case_start_date = db.Column(db.String(128))
    char_notes = db.Column(db.Text)
    chronicle = db.Column(db.String(128))
    claimed_bewitched = db.Column(db.Boolean)
    claimed_natural_causes = db.Column(db.Boolean)
    claimed_possessed = db.Column(db.Boolean)
    commission = db.Column(db.String(128))
    communal_sex = db.Column(db.Boolean)
    complaint = db.Column(db.String(128))
    consulting_p = db.Column(db.Boolean)
    consulting_s = db.Column(db.Boolean)
    correspondence = db.Column(db.String(128))
    cursing = db.Column(db.Boolean)
    dancing = db.Column(db.Boolean)
    defense_notes = db.Column(db.Text)
    demonic_pact = db.Column(db.Boolean)
    demonic_p = db.Column(db.Boolean)
    demonic_possess_p = db.Column(db.Boolean)
    demonic_possess_s = db.Column(db.Boolean)
    demonic_s = db.Column(db.Boolean)
    devil_notes = db.Column(db.Text)
    devil_present = db.Column(db.Boolean)
    devil_worship = db.Column(db.Boolean)
    disease_notes = db.Column(db.Text)
    dreams_visions = db.Column(db.Boolean)
    elphane_fairyland = db.Column(db.Boolean)
    fairies_p = db.Column(db.Boolean)
    fairies_s = db.Column(db.Boolean)
    familiars = db.Column(db.Boolean)
    female_infertility = db.Column(db.Boolean)
    folk_healing_p = db.Column(db.Boolean)
    folk_healing_s = db.Column(db.Boolean)
    folk_notes = db.Column(db.Text)
    food_and_drink = db.Column(db.Boolean)
    food_drink = db.Column(db.Boolean)
    healing_animals = db.Column(db.Boolean)
    healing_humans = db.Column(db.Boolean)
    human_death = db.Column(db.Boolean)
    human_illness = db.Column(db.Boolean)
    implicated_by_another_p = db.Column(db.Boolean)
    implicated_by_another_s = db.Column(db.Boolean)
    laying_on = db.Column(db.Boolean)
    maleficium = db.Column(db.Boolean)
    maleficium_p = db.Column(db.Boolean)
    maleficium_s = db.Column(db.Boolean)
    male_impotence = db.Column(db.Boolean)
    meeting_name = db.Column(db.Boolean)
    meeting_notes = db.Column(db.Text)
    midwifery = db.Column(db.Boolean)
    midwifery_p = db.Column(db.Boolean)
    midwifery_s = db.Column(db.Boolean)
    named_individual = db.Column(db.Boolean)
    neighbhd_dispute_p = db.Column(db.Boolean)
    neighbhd_dispute_s = db.Column(db.Boolean)
    nodefence = db.Column(db.Boolean)
    not_enough_info_p = db.Column(db.Boolean)
    not_enough_info_s = db.Column(db.Boolean)
    other_charges_notes = db.Column(db.Text)
    other = db.Column(db.String(128))
    other_maleficia_notes = db.Column(db.Text)
    other_p = db.Column(db.Boolean)
    other_practices = db.Column(db.String(128))
    other_s = db.Column(db.Boolean)
    other_text = db.Column(db.Text)
    poisoning = db.Column(db.Boolean)
    political_motive_p = db.Column(db.Boolean)
    political_motive_s = db.Column(db.Boolean)
    property_damage = db.Column(db.Boolean)
    property_motive_p = db.Column(db.Boolean)
    property_motive_s = db.Column(db.Boolean)
    quarreling = db.Column(db.Boolean)
    rec_healer = db.Column(db.Boolean)
    refused_charity_p = db.Column(db.Boolean)
    refused_charity_s = db.Column(db.Boolean)
    removalbewitchment = db.Column(db.Boolean)
    ridingdead = db.Column(db.Boolean)
    shape_changing = db.Column(db.Boolean)
    singing = db.Column(db.Boolean)
    singing_text = db.Column(db.Text)
    specific_ritual_acts = db.Column(db.Boolean)
    specific_verbal_formulae = db.Column(db.Boolean)
    suspects_text = db.Column(db.Integer)
    sympathetic_magic = db.Column(db.Boolean)
    transferring_disease = db.Column(db.Boolean)
    treason_p = db.Column(db.Boolean)
    treason_s = db.Column(db.Boolean)
    unorthodox_religious_practice = db.Column(db.Boolean)
    unorthodox_rel_pract_p = db.Column(db.Boolean)
    unorthodox_rel_pract_s = db.Column(db.Boolean)
    weather_modification = db.Column(db.Boolean)
    white_magic_p = db.Column(db.Boolean)
    white_magic_s = db.Column(db.Boolean)
    witches_meeting = db.Column(db.Boolean)

    def case_chars(self):
        '''
        Return list of case characteristics (bools marked True)
        Filter out unhelpful bools
        '''
        blacklist = ['not_enough_info_p', 'not_enough_info_s', 'named_individual', 'implicated_by_another_p', 'implicated_by_another_s', 'suspects_text']
        return [re.sub('_',' ',key).capitalize() for key, val in self.__dict__.items() if val==True and key not in blacklist]

    def case_note_text(self):
        '''
        Return list of case notes (col type tex and not Null)
        '''
        whitelist = ['case_notes','char_notes','complaint','devil_notes','disease_notes', 'folk_notes', 'meeting_notes', 'other_charges_notes', 'other_maleficia_notes', 'other_text', 'singing_text']
        return ["{}: {}".format(re.sub('_',' ',key).capitalize(),val) for key, val in self.__dict__.items() if key in whitelist and val != None]

    def __repr__(self):
        return 'Case: {}, {}'.format(self.case_id, self.case_date)
